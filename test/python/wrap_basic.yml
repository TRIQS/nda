# Generated by cpp2py with the command :
# cpp2py wrap_basic.hpp -m wrap_basic

# ----------  General configuration ------------
configuration:
  module_name: wrap_basic  # Name of the module in Python [No default]
  white_list: 
  black_list: 
  ns_white_list: 
  source_file_only: false  # Use only elements defined in the source file, excluding any included header
  skip_deprecated: true  # Skip all deprecated elements [Default is true]
  generate_hdf5: true  # Generate h5 code for TRIQS/h5 if the class satisfies the concept [Default is true]
  generate_algebra: true  # Generate wrapping code for group, vector space, algebra [Default is true]
  generate_iterator: true  # Makes class with begin/end iterable [Default is true]
  transform_get_set_to_property: false  # All get/set methods with no/1 arg are transformed into property [Default is false]
  members_read_only: false  # All members are read_only by default [Default is false]

# 
# ----------- Description of functions deduced from C++ code ----------------
functions:
  make_arr:
    nda::array<long, 1> make_arr(long n): 
    nda::array<long, 2> make_arr(long n1, long n2): 
  make_arr_arr:
    nda::array<nda::array<long, 1>, 1> make_arr_arr(long n1, long n2): 
  size_arr:
    long size_arr(nda::array<long, 1> const &a): 
    long size_arr(nda::array<long, 2> const &a): 
  size_arr_v:
    long size_arr_v(nda::array_view<long, 1> a): 
    long size_arr_v(nda::array_view<long, 2> a): 
  size_arr_cv:
    long size_arr_cv(nda::array_const_view<long, 1> a): 
    long size_arr_cv(nda::array_const_view<long, 2> a): 
  size_arr_arr:
    long size_arr_arr(nda::array<nda::array<long, 1>, 1> a): 
  size_arr_arr_v:
    long size_arr_arr_v(nda::array<nda::array_view<long, 1>, 1> a): 
  size_arr_arr_cv:
    long size_arr_arr_cv(nda::array<nda::array_const_view<long, 1>, 1> a): 
  multby2:
    nda::array<long, R> multby2(nda::array<long, R> const &a):
      tparams: [R]
      instantiate:
        - [1]
        - [2]
  multby2_d:
    nda::array<double, 1> multby2_d(nda::array<double, 1> const &a): 

# 
# ----------- Description of classes deduced from C++ code ----------------
classes:
  MemberAccess:
    c_type: member_access  #  C++ name

    members:  # List of members, RW, RO, or skip. Name in C++ and Python are the same
      read_write: [arr, arr_arr]

