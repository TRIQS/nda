# Generated by cpp2py with the command :
# cpp2py -v copy_move_stat.hpp -m copy_move_stat

# ----------  General configuration ------------
configuration:
  module_name: copy_move_stat  # Name of the module in Python [No default]
  white_list: 
  black_list: 
  ns_white_list: 
  source_file_only: false  # Use only elements defined in the source file, excluding any included header
  skip_deprecated: true  # Skip all deprecated elements [Default is true]
  generate_hdf5: true  # Generate h5 code for TRIQS/h5 if the class satisfies the concept [Default is true]
  generate_algebra: true  # Generate wrapping code for group, vector space, algebra [Default is true]
  generate_iterator: true  # Makes class with begin/end iterable [Default is true]
  transform_get_set_to_property: false  # All get/set methods with no/1 arg are transformed into property [Default is false]
  members_read_only: false  # All members are read_only by default [Default is false]

# 
# ----------- Description of classes deduced from C++ code ----------------
classes:
  CopyMoveStat:
    c_type: copy_move_stat  #  C++ name

    methods:  # List all methods. The key is the python name.
      __init__:
        copy_move_stat(bool verbose): 

      copy_count:
        long copy_count(): 

      move_count:
        long move_count(): 

      reset:
        void reset(): 

  MemberStat:
    c_type: member_stat  #  C++ name

    methods:  # List all methods. The key is the python name.
      __init__:
        member_stat(): 

    members:  # List of members, RW, RO, or skip. Name in C++ and Python are the same
      read_write: [m]

# 
# ----------- Description of functions deduced from C++ code ----------------
functions:
  make_obj:
    copy_move_stat make_obj(): 
  make_arr:
    nda::array<copy_move_stat, 1> make_arr(long n): 
    nda::array<copy_move_stat, 2> make_arr(long n1, long n2): 
  take_obj:
    long take_obj(copy_move_stat o): 
  take_arr:
    long take_arr(nda::array<copy_move_stat, 1> const &a): 
    long take_arr(nda::array<copy_move_stat, 2> const &a): 

