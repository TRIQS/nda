//****************************************
// GENERATED BY MAKO : DO NOT EDIT
//****************************************
/*******************************************************************************
 *
 * TRIQS: a Toolbox for Research in Interacting Quantum Systems
 *
 * Copyright (C) 2017 by the Simons Foundation
 * author : O. Parcollet
 *
 * TRIQS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * TRIQS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * TRIQS. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
#pragma once

namespace nda {

  /**
 * for i
 *   for j
 *     for k 
 *     .... 
 *        f(i,j,k ...)
 * */
  template <typename F, int R> void for_each(std::array<long, R> idx_lenghts, F &&f);

  // cheating ...
  template <typename F, int R> template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0) F(i_0);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1) F(i_0, i_1);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2) F(i_0, i_1, i_2);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3) F(i_0, i_1, i_2, i_3);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3)
            for (int i_4 = 0; i_4 < idx_lenghts[4]; ++i_4) F(i_0, i_1, i_2, i_3, i_4);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3)
            for (int i_4 = 0; i_4 < idx_lenghts[4]; ++i_4)
              for (int i_5 = 0; i_5 < idx_lenghts[5]; ++i_5) F(i_0, i_1, i_2, i_3, i_4, i_5);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3)
            for (int i_4 = 0; i_4 < idx_lenghts[4]; ++i_4)
              for (int i_5 = 0; i_5 < idx_lenghts[5]; ++i_5)
                for (int i_6 = 0; i_6 < idx_lenghts[6]; ++i_6) F(i_0, i_1, i_2, i_3, i_4, i_5, i_6);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3)
            for (int i_4 = 0; i_4 < idx_lenghts[4]; ++i_4)
              for (int i_5 = 0; i_5 < idx_lenghts[5]; ++i_5)
                for (int i_6 = 0; i_6 < idx_lenghts[6]; ++i_6)
                  for (int i_7 = 0; i_7 < idx_lenghts[7]; ++i_7) F(i_0, i_1, i_2, i_3, i_4, i_5, i_6, i_7);
  }
  template <typename F> void for_each(std::array<long, R> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1)
        for (int i_2 = 0; i_2 < idx_lenghts[2]; ++i_2)
          for (int i_3 = 0; i_3 < idx_lenghts[3]; ++i_3)
            for (int i_4 = 0; i_4 < idx_lenghts[4]; ++i_4)
              for (int i_5 = 0; i_5 < idx_lenghts[5]; ++i_5)
                for (int i_6 = 0; i_6 < idx_lenghts[6]; ++i_6)
                  for (int i_7 = 0; i_7 < idx_lenghts[7]; ++i_7)
                    for (int i_8 = 0; i_8 < idx_lenghts[8]; ++i_8) F(i_0, i_1, i_2, i_3, i_4, i_5, i_6, i_7, i_8);
  }

} // namespace nda
