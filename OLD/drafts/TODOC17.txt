
Table of systematic remplacement

minivector --> std::array
bool_constant


1- remove mini_vector for std::array
   
   pb : no init : does it hurt the code somewhere ?
   no cross construction. 
   Unify all strides, lengths as std::array<long, R> : no more size_t 

    triqs:: shape_t  = std::array<long,...> : alias
 
2- merge domain -> map
  
  - remove domain.
  - simplify generator of the domain -> standalone
  - map : 
     clean generator, recursive code.

  - arrays : indexmap_t 
  
  - on template: C order, no stride, no start for speed.
  - no traversal order

  - hyperslab ? NO

3- foreach : 

  - remove boost preproc. Mako ?
  
  - new C++17 enumerate for array and their indices.

4- array, matrix, vector : 

- rm TO ?  mv to Opt ?

- _impl calss 
  _am_impl <  Derived template temaplte >

- _am <T,R, AM>
  _am_view

- unifty array, matrix, vector : 


- const_view is a view of const T ??
  intercept = with static assert ...

- slice simplification : 
 
 - matrix -> matrix : always same time # 405
 - add mult matrix * array<T, 1> ...
            array<1> * matrix ?
 
 - supress vector ?? Confusing with std:: vector.
   blas : array<T, 1>
   + bacjwd compat alias.
   add [] to array in 1d only !! or reinterpret as flatten ???

   put blas call code in = if rank is 1 ? or all the time if no stride ?
   if contexpr (is container) or no stride ?

   is blas::copy really faster than loop ???, daxpy ? 
   SPEED TEST ?
   incx and so are trivial for containers...

   if constexpr : various implementation 
 
- _amv : indexmap simpler


- rewrite /simplif if constexpr 
  - operator =
  - () 

- size_t -> long ?


5- Proxy

 - clean current only
 - put and test the general ones !!




6- bury lapack, blas.
 + cleaning code 17

7- expression template:

suppres vector. Matrix * matrix...

8-mem_blk_handle : 


9- array_view<Any, Dynamic> 

array_view < Any Scalar ?,   -1>

Any type, stores it dynamically.
indexmap : dynamic as well, with a maximum dim ? 

If element type is in storages, it is trivial then.

10- Python

- after storages.
 
- view (why view ??) to python
  
  c_to_python( array_view<Any, Dynamic>) --> PyObject * : new ref
  rebuild a new python, taking a ref as guard.
  + a template + array_view<T,R> -> array_view<Any, Dynamic> construction

  --> bury the Python in cpp.

- numpy extractor : 

  a simple function, return array_view<Any, Dynamic> 


11- HDF5 : 

- use array<any, Dynamic> 
- only light template to call.

12- HDF5 of large array by chunks.


13- Better support of hyperslab ?
   array + indexmap of view   <-->
   h5_write(file, name, arr, slice(???))

14- use array<any, -1> as a bridge h5 <-> Python
and replace h5py.


15- Lambda -> array dressing
   
16- Concept cleaning.

17 stack except !



1-
matrix slice -> always matrix.
can construct a vector view
allow matrix mult.
Issue #405

2- 
array, vector, matrix

 simplify indexmap : 2 classes for view and non view
   no shift.
   no strides ?
   C order. First stride is 1.

   Need a full_view ??

 merge classes : ISP + array

 impl. class              
   _array< T, R, RVC, AMV, ?>
   
    alias matrix, array ou derivation  + CRTP with template template matrix, etc... : pb du slice ! 
      sol : alias, no derivation. Transform a bit API for matrices (specific methods to functions).
            pbs :  
               [] for vector ? : enable it  + forward to ()

- suppress weak view. Replace by proxy.
  merge the proxy code.

- suppress traversal order TO : always C.
  or template call of foreach

- C++17 : functional, 

- allocators

  Use alex. allocators, including buckets.
 
  Can we do a Python isolation ? 
     - insulate the type in the cpp, not hpp. Need type erasure ?
       T can be a Python type or not !

     - yes we can .

  no [] for memblock, just a char.
  pass the desctructor of objects by std::function as callback.
  or a desctructor factorized (loop on array).

  mem_block does not depend on type anymore, it is a block of char.
  

  Pb is more general : put all Python call beyond header ??


- Python isolation.
  pour les arrays.
 
- lapack isolation.

- cleaner print : cf Wentzell discs.

- PERFORMANCE CHECK : 

  - access
  - alloc, 

- stack array ??


- if constexpr simplification : 
   - constructor
   - assignemnt

:q

