#include <array>

template <int I, typename F, size_t R> 
void for_each_impl(std::array<long, R> idx_lenghts, F &&f) {
    if constexpr (I == R)
     f();
    else {
      for (int i0 = 0; i0 < idx_lenghts[I]; ++i0) {
        for_each_impl<I + 1>(idx_lenghts, 
        [i0,f](auto &&... x) __attribute__((always_inline)) {  f(i0, x...); });
      }
    }
  }

   template <typename F> void 
   for_each(std::array<long, 2> idx_lenghts, F &&f) {
    for (int i_0 = 0; i_0 < idx_lenghts[0]; ++i_0)
      for (int i_1 = 0; i_1 < idx_lenghts[1]; ++i_1) 
      f(i_0, i_1);
  }

void f(int, int);

void g(std::array<long, 2> id) { 
    auto l= [](int i, int j)->void{ f(i,j);};
    for_each(id, l);
}

void gg(std::array<long, 2> id) { 
    auto l= [](int i, int j)->void{ f(i,j);};
    for_each_impl<0>(id, l);
}

void ggg(std::array<long, 3> id) { 
    auto l= [](int i, int j, int k){ f(i,j);};
    for_each_impl<0>(id, l);
}

